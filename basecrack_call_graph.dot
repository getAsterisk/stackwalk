digraph CallGraph {
  rankdir=LR;
  node [shape=box];
  "/Users/mufeedvh/dev/basecrack/basecrack.py.banner" [label="banner"];
  "/Users/mufeedvh/dev/basecrack/tests/tests.py.test_ascii85" [label="test_ascii85"];
  "/Users/mufeedvh/dev/basecrack/tests/tests.py.TestBase.test_base58" [label="TestBase::test_base58"];
  "/Users/mufeedvh/dev/basecrack/src/base_chain.py.process_decode" [label="process_decode"];
  "/Users/mufeedvh/dev/basecrack/tests/tests.py.test_base64" [label="test_base64"];
  "/Users/mufeedvh/dev/basecrack/tests/tests.py.test_base64url" [label="test_base64url"];
  "/Users/mufeedvh/dev/basecrack/src/base_chain.py.DecodeBase.decode_base" [label="DecodeBase::decode_base"];
  "/Users/mufeedvh/dev/basecrack/tests/tests.py.test_base62" [label="test_base62"];
  "/Users/mufeedvh/dev/basecrack/basecrack.py.BaseCrack.decode_from_image" [label="BaseCrack::decode_from_image"];
  "/Users/mufeedvh/dev/basecrack/basecrack.py.decode_base" [label="decode_base"];
  "/Users/mufeedvh/dev/basecrack/src/base_chain.py.DecodeBase.__init__" [label="DecodeBase::__init__"];
  "/Users/mufeedvh/dev/basecrack/basecrack.py.BaseCrack.decode_from_file" [label="BaseCrack::decode_from_file"];
  "/Users/mufeedvh/dev/basecrack/tests/tests.py.TestBase.test_base62" [label="TestBase::test_base62"];
  "/Users/mufeedvh/dev/basecrack/src/base_chain.py.contains_replacement_char" [label="contains_replacement_char"];
  "/Users/mufeedvh/dev/basecrack/basecrack.py.BaseCrack.__init__" [label="BaseCrack::__init__"];
  "/Users/mufeedvh/dev/basecrack/basecrack.py.magic_mode" [label="magic_mode"];
  "/Users/mufeedvh/dev/basecrack/basecrack.py.BaseCrack.decode_base" [label="BaseCrack::decode_base"];
  "/Users/mufeedvh/dev/basecrack/basecrack.py.__init__" [label="__init__"];
  "/Users/mufeedvh/dev/basecrack/tests/tests.py.TestBase.test_base32" [label="TestBase::test_base32"];
  "/Users/mufeedvh/dev/basecrack/tests/tests.py.test_base58" [label="test_base58"];
  "/Users/mufeedvh/dev/basecrack/basecrack.py.decode_from_file" [label="decode_from_file"];
  "/Users/mufeedvh/dev/basecrack/tests/tests.py.test_base16" [label="test_base16"];
  "/Users/mufeedvh/dev/basecrack/tests/tests.py.test_base85" [label="test_base85"];
  "/Users/mufeedvh/dev/basecrack/basecrack.py.decode_from_image" [label="decode_from_image"];
  "/Users/mufeedvh/dev/basecrack/src/messages.py.print_line_separator" [label="print_line_separator"];
  "/Users/mufeedvh/dev/basecrack/tests/tests.py.TestBase.test_base16" [label="TestBase::test_base16"];
  "/Users/mufeedvh/dev/basecrack/src/base92.py.base92_ord" [label="base92_ord"];
  "/Users/mufeedvh/dev/basecrack/basecrack.py.BaseCrack.decode" [label="BaseCrack::decode"];
  "/Users/mufeedvh/dev/basecrack/src/base_chain.py.DecodeBase.decode" [label="DecodeBase::decode"];
  "/Users/mufeedvh/dev/basecrack/basecrack.py.BaseCrack.magic_mode" [label="BaseCrack::magic_mode"];
  "/Users/mufeedvh/dev/basecrack/src/base_chain.py.DecodeBase.process_decode" [label="DecodeBase::process_decode"];
  "/Users/mufeedvh/dev/basecrack/tests/tests.py.TestBase.test_base85" [label="TestBase::test_base85"];
  "/Users/mufeedvh/dev/basecrack/src/base_chain.py.__init__" [label="__init__"];
  "/Users/mufeedvh/dev/basecrack/src/base_chain.py.DecodeBase.contains_replacement_char" [label="DecodeBase::contains_replacement_char"];
  "/Users/mufeedvh/dev/basecrack/src/messages.py.push_error" [label="push_error"];
  "/Users/mufeedvh/dev/basecrack/src/base_chain.py.decode_base" [label="decode_base"];
  "/Users/mufeedvh/dev/basecrack/src/base_chain.py.decode" [label="decode"];
  "/Users/mufeedvh/dev/basecrack/tests/tests.py.test_base91" [label="test_base91"];
  "/Users/mufeedvh/dev/basecrack/tests/tests.py.TestBase.test_base64url" [label="TestBase::test_base64url"];
  "/Users/mufeedvh/dev/basecrack/tests/tests.py.test_base36" [label="test_base36"];
  "/Users/mufeedvh/dev/basecrack/tests/tests.py.test_base100" [label="test_base100"];
  "/Users/mufeedvh/dev/basecrack/tests/tests.py.TestBase.test_base91" [label="TestBase::test_base91"];
  "/Users/mufeedvh/dev/basecrack/tests/tests.py.TestBase.test_base64" [label="TestBase::test_base64"];
  "/Users/mufeedvh/dev/basecrack/tests/tests.py.TestBase.test_base100" [label="TestBase::test_base100"];
  "/Users/mufeedvh/dev/basecrack/src/base92.py.base92_decode" [label="base92_decode"];
  "/Users/mufeedvh/dev/basecrack/tests/tests.py.TestBase.test_base92" [label="TestBase::test_base92"];
  "/Users/mufeedvh/dev/basecrack/tests/tests.py.TestBase.test_ascii85" [label="TestBase::test_ascii85"];
  "/Users/mufeedvh/dev/basecrack/basecrack.py.decode" [label="decode"];
  "/Users/mufeedvh/dev/basecrack/tests/tests.py.test_base92" [label="test_base92"];
  "/Users/mufeedvh/dev/basecrack/tests/tests.py.test_base32" [label="test_base32"];
  "/Users/mufeedvh/dev/basecrack/basecrack.py.main" [label="main"];
  "/Users/mufeedvh/dev/basecrack/tests/tests.py.TestBase.test_base36" [label="TestBase::test_base36"];
  "/Users/mufeedvh/dev/basecrack/basecrack.py.BaseCrack.decode_from_image" -> "/Users/mufeedvh/dev/basecrack/basecrack.py.len";
  "/Users/mufeedvh/dev/basecrack/basecrack.py.BaseCrack.decode_from_image" -> "/Users/mufeedvh/dev/basecrack/basecrack.py.re.sub";
  "/Users/mufeedvh/dev/basecrack/basecrack.py.BaseCrack.decode_from_image" -> "/Users/mufeedvh/dev/basecrack/basecrack.py.platform.system";
  "/Users/mufeedvh/dev/basecrack/basecrack.py.BaseCrack.decode_from_image" -> "/Users/mufeedvh/dev/basecrack/basecrack.py.open('config.json', 'r').read";
  "/Users/mufeedvh/dev/basecrack/basecrack.py.BaseCrack.decode_from_image" -> "/Users/mufeedvh/dev/basecrack/basecrack.py.self.magic_mode";
  "/Users/mufeedvh/dev/basecrack/basecrack.py.BaseCrack.decode_from_image" -> "/Users/mufeedvh/dev/basecrack/basecrack.py.str(exif_tags[tag]).split";
  "/Users/mufeedvh/dev/basecrack/basecrack.py.BaseCrack.decode_from_image" -> "/Users/mufeedvh/dev/basecrack/basecrack.py.quit";
  "/Users/mufeedvh/dev/basecrack/basecrack.py.BaseCrack.decode_from_image" -> "/Users/mufeedvh/dev/basecrack/basecrack.py.str(get_text).replace";
  "/Users/mufeedvh/dev/basecrack/basecrack.py.BaseCrack.decode_from_image" -> "/Users/mufeedvh/dev/basecrack/basecrack.py.str";
  "/Users/mufeedvh/dev/basecrack/basecrack.py.BaseCrack.decode_from_image" -> "/Users/mufeedvh/dev/basecrack/basecrack.py.r'{}'.format";
  "/Users/mufeedvh/dev/basecrack/basecrack.py.BaseCrack.decode_from_image" -> "/Users/mufeedvh/dev/basecrack/basecrack.py.base.splitlines";
  "/Users/mufeedvh/dev/basecrack/basecrack.py.BaseCrack.decode_from_image" -> "/Users/mufeedvh/dev/basecrack/basecrack.py.json.loads";
  "/Users/mufeedvh/dev/basecrack/basecrack.py.BaseCrack.decode_from_image" -> "/Users/mufeedvh/dev/basecrack/basecrack.py.cv2.imread";
  "/Users/mufeedvh/dev/basecrack/basecrack.py.BaseCrack.decode_from_image" -> "/Users/mufeedvh/dev/basecrack/basecrack.py.pytesseract.image_to_string";
  "/Users/mufeedvh/dev/basecrack/basecrack.py.BaseCrack.decode_from_image" -> "/Users/mufeedvh/dev/basecrack/basecrack.py.push_error";
  "/Users/mufeedvh/dev/basecrack/basecrack.py.BaseCrack.decode_from_image" -> "/Users/mufeedvh/dev/basecrack/basecrack.py.exifread.process_file";
  "/Users/mufeedvh/dev/basecrack/basecrack.py.BaseCrack.decode_from_image" -> "/Users/mufeedvh/dev/basecrack/basecrack.py.open";
  "/Users/mufeedvh/dev/basecrack/basecrack.py.BaseCrack.decode_from_image" -> "/Users/mufeedvh/dev/basecrack/basecrack.py.self.decode_base";
  "/Users/mufeedvh/dev/basecrack/basecrack.py.BaseCrack.decode_from_image" -> "/Users/mufeedvh/dev/basecrack/basecrack.py.Path(image).is_file";
  "/Users/mufeedvh/dev/basecrack/basecrack.py.BaseCrack.decode_from_image" -> "/Users/mufeedvh/dev/basecrack/basecrack.py.Path";
  "/Users/mufeedvh/dev/basecrack/src/base92.py.base92_decode" -> "/Users/mufeedvh/dev/basecrack/src/base92.py.'{:013b}'.format";
  "/Users/mufeedvh/dev/basecrack/src/base92.py.base92_decode" -> "/Users/mufeedvh/dev/basecrack/src/base92.py.'{:06b}'.format";
  "/Users/mufeedvh/dev/basecrack/src/base92.py.base92_decode" -> "/Users/mufeedvh/dev/basecrack/src/base92.py.len";
  "/Users/mufeedvh/dev/basecrack/src/base92.py.base92_decode" -> "/Users/mufeedvh/dev/basecrack/src/base92.py.chr";
  "/Users/mufeedvh/dev/basecrack/src/base92.py.base92_decode" -> "/Users/mufeedvh/dev/basecrack/src/base92.py.range";
  "/Users/mufeedvh/dev/basecrack/src/base92.py.base92_decode" -> "/Users/mufeedvh/dev/basecrack/src/base92.py.base92_ord";
  "/Users/mufeedvh/dev/basecrack/src/base92.py.base92_decode" -> "/Users/mufeedvh/dev/basecrack/src/base92.py.int";
  "/Users/mufeedvh/dev/basecrack/src/base_chain.py.DecodeBase.process_decode" -> "/Users/mufeedvh/dev/basecrack/src/base_chain.py.results.append";
  "/Users/mufeedvh/dev/basecrack/src/base_chain.py.DecodeBase.process_decode" -> "/Users/mufeedvh/dev/basecrack/src/base_chain.py.encoding_type.append";
  "/Users/mufeedvh/dev/basecrack/src/base_chain.py.DecodeBase.process_decode" -> "/Users/mufeedvh/dev/basecrack/src/base_chain.py.print";
  "/Users/mufeedvh/dev/basecrack/src/base_chain.py.DecodeBase.process_decode" -> "/Users/mufeedvh/dev/basecrack/src/base_chain.py.colored";
  "/Users/mufeedvh/dev/basecrack/src/base_chain.py.DecodeBase.process_decode" -> "/Users/mufeedvh/dev/basecrack/src/base_chain.py.self.contains_replacement_char";
  "/Users/mufeedvh/dev/basecrack/src/base_chain.py.DecodeBase.process_decode" -> "/Users/mufeedvh/dev/basecrack/src/base_chain.py.'\n[>] Decoding as {}: '.format";
  "/Users/mufeedvh/dev/basecrack/src/base_chain.py.DecodeBase.process_decode" -> "/Users/mufeedvh/dev/basecrack/src/base_chain.py.len";
  "/Users/mufeedvh/dev/basecrack/src/base_chain.py.contains_replacement_char" -> "/Users/mufeedvh/dev/basecrack/src/base_chain.py.ord";
  "/Users/mufeedvh/dev/basecrack/tests/tests.py.test_base100" -> "/Users/mufeedvh/dev/basecrack/tests/tests.py.BaseCrack().decode";
  "/Users/mufeedvh/dev/basecrack/tests/tests.py.test_base100" -> "/Users/mufeedvh/dev/basecrack/tests/tests.py.BaseCrack";
  "/Users/mufeedvh/dev/basecrack/basecrack.py.BaseCrack.decode_from_file" -> "/Users/mufeedvh/dev/basecrack/basecrack.py.print";
  "/Users/mufeedvh/dev/basecrack/basecrack.py.BaseCrack.decode_from_file" -> "/Users/mufeedvh/dev/basecrack/basecrack.py.colored";
  "/Users/mufeedvh/dev/basecrack/basecrack.py.BaseCrack.decode_from_file" -> "/Users/mufeedvh/dev/basecrack/basecrack.py.Path";
  "/Users/mufeedvh/dev/basecrack/basecrack.py.BaseCrack.decode_from_file" -> "/Users/mufeedvh/dev/basecrack/basecrack.py.open";
  "/Users/mufeedvh/dev/basecrack/basecrack.py.BaseCrack.decode_from_file" -> "/Users/mufeedvh/dev/basecrack/basecrack.py.len";
  "/Users/mufeedvh/dev/basecrack/basecrack.py.BaseCrack.decode_from_file" -> "/Users/mufeedvh/dev/basecrack/basecrack.py.str";
  "/Users/mufeedvh/dev/basecrack/basecrack.py.BaseCrack.decode_from_file" -> "/Users/mufeedvh/dev/basecrack/basecrack.py.push_error";
  "/Users/mufeedvh/dev/basecrack/basecrack.py.BaseCrack.decode_from_file" -> "/Users/mufeedvh/dev/basecrack/basecrack.py.quit";
  "/Users/mufeedvh/dev/basecrack/basecrack.py.BaseCrack.decode_from_file" -> "/Users/mufeedvh/dev/basecrack/basecrack.py.Path(file).is_file";
  "/Users/mufeedvh/dev/basecrack/basecrack.py.BaseCrack.decode_from_file" -> "/Users/mufeedvh/dev/basecrack/basecrack.py.self.decode_base";
  "/Users/mufeedvh/dev/basecrack/basecrack.py.BaseCrack.decode_from_file" -> "/Users/mufeedvh/dev/basecrack/basecrack.py.line.strip";
  "/Users/mufeedvh/dev/basecrack/basecrack.py.BaseCrack.decode_from_file" -> "/Users/mufeedvh/dev/basecrack/basecrack.py.self.magic_mode";
  "/Users/mufeedvh/dev/basecrack/basecrack.py.BaseCrack.decode_from_file" -> "/Users/mufeedvh/dev/basecrack/basecrack.py.print_line_separator";
  "/Users/mufeedvh/dev/basecrack/tests/tests.py.test_base32" -> "/Users/mufeedvh/dev/basecrack/tests/tests.py.BaseCrack";
  "/Users/mufeedvh/dev/basecrack/tests/tests.py.test_base32" -> "/Users/mufeedvh/dev/basecrack/tests/tests.py.BaseCrack().decode";
  "/Users/mufeedvh/dev/basecrack/tests/tests.py.TestBase.test_base32" -> "/Users/mufeedvh/dev/basecrack/tests/tests.py.BaseCrack().decode";
  "/Users/mufeedvh/dev/basecrack/tests/tests.py.TestBase.test_base32" -> "/Users/mufeedvh/dev/basecrack/tests/tests.py.BaseCrack";
  "/Users/mufeedvh/dev/basecrack/basecrack.py.BaseCrack.decode_base" -> "/Users/mufeedvh/dev/basecrack/basecrack.py.results[x].strip";
  "/Users/mufeedvh/dev/basecrack/basecrack.py.BaseCrack.decode_base" -> "/Users/mufeedvh/dev/basecrack/basecrack.py.push_error";
  "/Users/mufeedvh/dev/basecrack/basecrack.py.BaseCrack.decode_base" -> "/Users/mufeedvh/dev/basecrack/basecrack.py.DecodeBase(
                encoded_base,
                api_call = self.api_call,
                image_mode = self.image_mode_call
            ).decode";
  "/Users/mufeedvh/dev/basecrack/basecrack.py.BaseCrack.decode_base" -> "/Users/mufeedvh/dev/basecrack/basecrack.py.open";
  "/Users/mufeedvh/dev/basecrack/basecrack.py.BaseCrack.decode_base" -> "/Users/mufeedvh/dev/basecrack/basecrack.py.colored";
  "/Users/mufeedvh/dev/basecrack/basecrack.py.BaseCrack.decode_base" -> "/Users/mufeedvh/dev/basecrack/basecrack.py.print_line_separator";
  "/Users/mufeedvh/dev/basecrack/basecrack.py.BaseCrack.decode_base" -> "/Users/mufeedvh/dev/basecrack/basecrack.py.DecodeBase";
  "/Users/mufeedvh/dev/basecrack/basecrack.py.BaseCrack.decode_base" -> "/Users/mufeedvh/dev/basecrack/basecrack.py.len";
  "/Users/mufeedvh/dev/basecrack/basecrack.py.BaseCrack.decode_base" -> "/Users/mufeedvh/dev/basecrack/basecrack.py.range";
  "/Users/mufeedvh/dev/basecrack/basecrack.py.BaseCrack.decode_base" -> "/Users/mufeedvh/dev/basecrack/basecrack.py.open(self.output, 'a').write";
  "/Users/mufeedvh/dev/basecrack/basecrack.py.BaseCrack.decode_base" -> "/Users/mufeedvh/dev/basecrack/basecrack.py.quit";
  "/Users/mufeedvh/dev/basecrack/basecrack.py.BaseCrack.decode_base" -> "/Users/mufeedvh/dev/basecrack/basecrack.py.print";
  "/Users/mufeedvh/dev/basecrack/tests/tests.py.test_base58" -> "/Users/mufeedvh/dev/basecrack/tests/tests.py.BaseCrack().decode";
  "/Users/mufeedvh/dev/basecrack/tests/tests.py.test_base58" -> "/Users/mufeedvh/dev/basecrack/tests/tests.py.BaseCrack";
  "/Users/mufeedvh/dev/basecrack/basecrack.py.decode" -> "/Users/mufeedvh/dev/basecrack/basecrack.py.self.decode_base";
  "/Users/mufeedvh/dev/basecrack/tests/tests.py.TestBase.test_base16" -> "/Users/mufeedvh/dev/basecrack/tests/tests.py.BaseCrack";
  "/Users/mufeedvh/dev/basecrack/tests/tests.py.TestBase.test_base16" -> "/Users/mufeedvh/dev/basecrack/tests/tests.py.BaseCrack().decode";
  "/Users/mufeedvh/dev/basecrack/tests/tests.py.TestBase.test_base62" -> "/Users/mufeedvh/dev/basecrack/tests/tests.py.BaseCrack().decode";
  "/Users/mufeedvh/dev/basecrack/tests/tests.py.TestBase.test_base62" -> "/Users/mufeedvh/dev/basecrack/tests/tests.py.BaseCrack";
  "/Users/mufeedvh/dev/basecrack/tests/tests.py.test_base85" -> "/Users/mufeedvh/dev/basecrack/tests/tests.py.BaseCrack";
  "/Users/mufeedvh/dev/basecrack/tests/tests.py.test_base85" -> "/Users/mufeedvh/dev/basecrack/tests/tests.py.BaseCrack().decode";
  "/Users/mufeedvh/dev/basecrack/basecrack.py.decode_from_image" -> "/Users/mufeedvh/dev/basecrack/basecrack.py.str(exif_tags[tag]).split";
  "/Users/mufeedvh/dev/basecrack/basecrack.py.decode_from_image" -> "/Users/mufeedvh/dev/basecrack/basecrack.py.cv2.imread";
  "/Users/mufeedvh/dev/basecrack/basecrack.py.decode_from_image" -> "/Users/mufeedvh/dev/basecrack/basecrack.py.quit";
  "/Users/mufeedvh/dev/basecrack/basecrack.py.decode_from_image" -> "/Users/mufeedvh/dev/basecrack/basecrack.py.Path(image).is_file";
  "/Users/mufeedvh/dev/basecrack/basecrack.py.decode_from_image" -> "/Users/mufeedvh/dev/basecrack/basecrack.py.pytesseract.image_to_string";
  "/Users/mufeedvh/dev/basecrack/basecrack.py.decode_from_image" -> "/Users/mufeedvh/dev/basecrack/basecrack.py.open";
  "/Users/mufeedvh/dev/basecrack/basecrack.py.decode_from_image" -> "/Users/mufeedvh/dev/basecrack/basecrack.py.json.loads";
  "/Users/mufeedvh/dev/basecrack/basecrack.py.decode_from_image" -> "/Users/mufeedvh/dev/basecrack/basecrack.py.str";
  "/Users/mufeedvh/dev/basecrack/basecrack.py.decode_from_image" -> "/Users/mufeedvh/dev/basecrack/basecrack.py.platform.system";
  "/Users/mufeedvh/dev/basecrack/basecrack.py.decode_from_image" -> "/Users/mufeedvh/dev/basecrack/basecrack.py.Path";
  "/Users/mufeedvh/dev/basecrack/basecrack.py.decode_from_image" -> "/Users/mufeedvh/dev/basecrack/basecrack.py.re.sub";
  "/Users/mufeedvh/dev/basecrack/basecrack.py.decode_from_image" -> "/Users/mufeedvh/dev/basecrack/basecrack.py.r'{}'.format";
  "/Users/mufeedvh/dev/basecrack/basecrack.py.decode_from_image" -> "/Users/mufeedvh/dev/basecrack/basecrack.py.len";
  "/Users/mufeedvh/dev/basecrack/basecrack.py.decode_from_image" -> "/Users/mufeedvh/dev/basecrack/basecrack.py.base.splitlines";
  "/Users/mufeedvh/dev/basecrack/basecrack.py.decode_from_image" -> "/Users/mufeedvh/dev/basecrack/basecrack.py.self.magic_mode";
  "/Users/mufeedvh/dev/basecrack/basecrack.py.decode_from_image" -> "/Users/mufeedvh/dev/basecrack/basecrack.py.push_error";
  "/Users/mufeedvh/dev/basecrack/basecrack.py.decode_from_image" -> "/Users/mufeedvh/dev/basecrack/basecrack.py.self.decode_base";
  "/Users/mufeedvh/dev/basecrack/basecrack.py.decode_from_image" -> "/Users/mufeedvh/dev/basecrack/basecrack.py.str(get_text).replace";
  "/Users/mufeedvh/dev/basecrack/basecrack.py.decode_from_image" -> "/Users/mufeedvh/dev/basecrack/basecrack.py.exifread.process_file";
  "/Users/mufeedvh/dev/basecrack/basecrack.py.decode_from_image" -> "/Users/mufeedvh/dev/basecrack/basecrack.py.open('config.json', 'r').read";
  "/Users/mufeedvh/dev/basecrack/basecrack.py.banner" -> "/Users/mufeedvh/dev/basecrack/basecrack.py.colored";
  "/Users/mufeedvh/dev/basecrack/basecrack.py.banner" -> "/Users/mufeedvh/dev/basecrack/basecrack.py.print";
  "/Users/mufeedvh/dev/basecrack/basecrack.py.decode_from_file" -> "/Users/mufeedvh/dev/basecrack/basecrack.py.print";
  "/Users/mufeedvh/dev/basecrack/basecrack.py.decode_from_file" -> "/Users/mufeedvh/dev/basecrack/basecrack.py.len";
  "/Users/mufeedvh/dev/basecrack/basecrack.py.decode_from_file" -> "/Users/mufeedvh/dev/basecrack/basecrack.py.Path";
  "/Users/mufeedvh/dev/basecrack/basecrack.py.decode_from_file" -> "/Users/mufeedvh/dev/basecrack/basecrack.py.line.strip";
  "/Users/mufeedvh/dev/basecrack/basecrack.py.decode_from_file" -> "/Users/mufeedvh/dev/basecrack/basecrack.py.str";
  "/Users/mufeedvh/dev/basecrack/basecrack.py.decode_from_file" -> "/Users/mufeedvh/dev/basecrack/basecrack.py.colored";
  "/Users/mufeedvh/dev/basecrack/basecrack.py.decode_from_file" -> "/Users/mufeedvh/dev/basecrack/basecrack.py.Path(file).is_file";
  "/Users/mufeedvh/dev/basecrack/basecrack.py.decode_from_file" -> "/Users/mufeedvh/dev/basecrack/basecrack.py.quit";
  "/Users/mufeedvh/dev/basecrack/basecrack.py.decode_from_file" -> "/Users/mufeedvh/dev/basecrack/basecrack.py.push_error";
  "/Users/mufeedvh/dev/basecrack/basecrack.py.decode_from_file" -> "/Users/mufeedvh/dev/basecrack/basecrack.py.self.decode_base";
  "/Users/mufeedvh/dev/basecrack/basecrack.py.decode_from_file" -> "/Users/mufeedvh/dev/basecrack/basecrack.py.print_line_separator";
  "/Users/mufeedvh/dev/basecrack/basecrack.py.decode_from_file" -> "/Users/mufeedvh/dev/basecrack/basecrack.py.open";
  "/Users/mufeedvh/dev/basecrack/basecrack.py.decode_from_file" -> "/Users/mufeedvh/dev/basecrack/basecrack.py.self.magic_mode";
  "/Users/mufeedvh/dev/basecrack/basecrack.py.BaseCrack.decode" -> "/Users/mufeedvh/dev/basecrack/basecrack.py.self.decode_base";
  "/Users/mufeedvh/dev/basecrack/tests/tests.py.test_base62" -> "/Users/mufeedvh/dev/basecrack/tests/tests.py.BaseCrack().decode";
  "/Users/mufeedvh/dev/basecrack/tests/tests.py.test_base62" -> "/Users/mufeedvh/dev/basecrack/tests/tests.py.BaseCrack";
  "/Users/mufeedvh/dev/basecrack/src/messages.py.push_error" -> "/Users/mufeedvh/dev/basecrack/src/messages.py.'\n[!] {}\n'.format";
  "/Users/mufeedvh/dev/basecrack/src/messages.py.push_error" -> "/Users/mufeedvh/dev/basecrack/src/messages.py.print";
  "/Users/mufeedvh/dev/basecrack/src/messages.py.push_error" -> "/Users/mufeedvh/dev/basecrack/src/messages.py.colored";
  "/Users/mufeedvh/dev/basecrack/src/base_chain.py.DecodeBase.decode" -> "/Users/mufeedvh/dev/basecrack/src/base_chain.py.self.decode_base";
  "/Users/mufeedvh/dev/basecrack/src/base_chain.py.decode_base" -> "/Users/mufeedvh/dev/basecrack/src/base_chain.py.str.encode";
  "/Users/mufeedvh/dev/basecrack/src/base_chain.py.decode_base" -> "/Users/mufeedvh/dev/basecrack/src/base_chain.py.process_decode";
  "/Users/mufeedvh/dev/basecrack/src/base_chain.py.decode_base" -> "/Users/mufeedvh/dev/basecrack/src/base_chain.py.base64.b64decode";
  "/Users/mufeedvh/dev/basecrack/src/base_chain.py.decode_base" -> "/Users/mufeedvh/dev/basecrack/src/base_chain.py.len";
  "/Users/mufeedvh/dev/basecrack/src/base_chain.py.decode_base" -> "/Users/mufeedvh/dev/basecrack/src/base_chain.py.base64.b32decode(
                    encoded_base, casefold=False, map01=None
                ).decode";
  "/Users/mufeedvh/dev/basecrack/src/base_chain.py.decode_base" -> "/Users/mufeedvh/dev/basecrack/src/base_chain.py.encoded_base.encode";
  "/Users/mufeedvh/dev/basecrack/src/base_chain.py.decode_base" -> "/Users/mufeedvh/dev/basecrack/src/base_chain.py.int";
  "/Users/mufeedvh/dev/basecrack/src/base_chain.py.decode_base" -> "/Users/mufeedvh/dev/basecrack/src/base_chain.py.base64.b85decode(encoded_base).decode";
  "/Users/mufeedvh/dev/basecrack/src/base_chain.py.decode_base" -> "/Users/mufeedvh/dev/basecrack/src/base_chain.py.base36.dumps";
  "/Users/mufeedvh/dev/basecrack/src/base_chain.py.decode_base" -> "/Users/mufeedvh/dev/basecrack/src/base_chain.py.base64.b16decode";
  "/Users/mufeedvh/dev/basecrack/src/base_chain.py.decode_base" -> "/Users/mufeedvh/dev/basecrack/src/base_chain.py.base91.decode";
  "/Users/mufeedvh/dev/basecrack/src/base_chain.py.decode_base" -> "/Users/mufeedvh/dev/basecrack/src/base_chain.py.base58.b58decode";
  "/Users/mufeedvh/dev/basecrack/src/base_chain.py.decode_base" -> "/Users/mufeedvh/dev/basecrack/src/base_chain.py.base64.b64decode(encoded_base).decode";
  "/Users/mufeedvh/dev/basecrack/src/base_chain.py.decode_base" -> "/Users/mufeedvh/dev/basecrack/src/base_chain.py.anybase32.decode(temp_clean_base).decode";
  "/Users/mufeedvh/dev/basecrack/src/base_chain.py.decode_base" -> "/Users/mufeedvh/dev/basecrack/src/base_chain.py.base64.urlsafe_b64decode";
  "/Users/mufeedvh/dev/basecrack/src/base_chain.py.decode_base" -> "/Users/mufeedvh/dev/basecrack/src/base_chain.py.base64.b16decode(encoded_base, casefold=False).decode";
  "/Users/mufeedvh/dev/basecrack/src/base_chain.py.decode_base" -> "/Users/mufeedvh/dev/basecrack/src/base_chain.py.anybase32.decode";
  "/Users/mufeedvh/dev/basecrack/src/base_chain.py.decode_base" -> "/Users/mufeedvh/dev/basecrack/src/base_chain.py.base91.decode(encoded_base).decode";
  "/Users/mufeedvh/dev/basecrack/src/base_chain.py.decode_base" -> "/Users/mufeedvh/dev/basecrack/src/base_chain.py.base64.b85decode";
  "/Users/mufeedvh/dev/basecrack/src/base_chain.py.decode_base" -> "/Users/mufeedvh/dev/basecrack/src/base_chain.py.base64.a85decode";
  "/Users/mufeedvh/dev/basecrack/src/base_chain.py.decode_base" -> "/Users/mufeedvh/dev/basecrack/src/base_chain.py.base58.b58decode(encoded_base.encode()).decode";
  "/Users/mufeedvh/dev/basecrack/src/base_chain.py.decode_base" -> "/Users/mufeedvh/dev/basecrack/src/base_chain.py.base64.b32decode";
  "/Users/mufeedvh/dev/basecrack/src/base_chain.py.decode_base" -> "/Users/mufeedvh/dev/basecrack/src/base_chain.py.base64.urlsafe_b64decode(
                    encoded_base + '=' * (4 - len(encoded_base) % 4)
                ).decode";
  "/Users/mufeedvh/dev/basecrack/src/base_chain.py.decode_base" -> "/Users/mufeedvh/dev/basecrack/src/base_chain.py.base62.decodebytes";
  "/Users/mufeedvh/dev/basecrack/src/base_chain.py.decode_base" -> "/Users/mufeedvh/dev/basecrack/src/base_chain.py.base62.decodebytes(encoded_base).decode";
  "/Users/mufeedvh/dev/basecrack/src/base_chain.py.decode_base" -> "/Users/mufeedvh/dev/basecrack/src/base_chain.py.pybase100.decode(encoded_base).decode";
  "/Users/mufeedvh/dev/basecrack/src/base_chain.py.decode_base" -> "/Users/mufeedvh/dev/basecrack/src/base_chain.py.encoded_base.replace";
  "/Users/mufeedvh/dev/basecrack/src/base_chain.py.decode_base" -> "/Users/mufeedvh/dev/basecrack/src/base_chain.py.pybase100.decode";
  "/Users/mufeedvh/dev/basecrack/src/base_chain.py.decode_base" -> "/Users/mufeedvh/dev/basecrack/src/base_chain.py.base64.a85decode(encoded_base).decode";
  "/Users/mufeedvh/dev/basecrack/src/base_chain.py.decode_base" -> "/Users/mufeedvh/dev/basecrack/src/base_chain.py.base92.decode";
  "/Users/mufeedvh/dev/basecrack/src/base_chain.py.DecodeBase.decode_base" -> "/Users/mufeedvh/dev/basecrack/src/base_chain.py.base64.b32decode(
                    encoded_base, casefold=False, map01=None
                ).decode";
  "/Users/mufeedvh/dev/basecrack/src/base_chain.py.DecodeBase.decode_base" -> "/Users/mufeedvh/dev/basecrack/src/base_chain.py.base64.b85decode";
  "/Users/mufeedvh/dev/basecrack/src/base_chain.py.DecodeBase.decode_base" -> "/Users/mufeedvh/dev/basecrack/src/base_chain.py.base62.decodebytes(encoded_base).decode";
  "/Users/mufeedvh/dev/basecrack/src/base_chain.py.DecodeBase.decode_base" -> "/Users/mufeedvh/dev/basecrack/src/base_chain.py.base64.b64decode(encoded_base).decode";
  "/Users/mufeedvh/dev/basecrack/src/base_chain.py.DecodeBase.decode_base" -> "/Users/mufeedvh/dev/basecrack/src/base_chain.py.base64.b85decode(encoded_base).decode";
  "/Users/mufeedvh/dev/basecrack/src/base_chain.py.DecodeBase.decode_base" -> "/Users/mufeedvh/dev/basecrack/src/base_chain.py.base58.b58decode(encoded_base.encode()).decode";
  "/Users/mufeedvh/dev/basecrack/src/base_chain.py.DecodeBase.decode_base" -> "/Users/mufeedvh/dev/basecrack/src/base_chain.py.base64.a85decode(encoded_base).decode";
  "/Users/mufeedvh/dev/basecrack/src/base_chain.py.DecodeBase.decode_base" -> "/Users/mufeedvh/dev/basecrack/src/base_chain.py.encoded_base.replace";
  "/Users/mufeedvh/dev/basecrack/src/base_chain.py.DecodeBase.decode_base" -> "/Users/mufeedvh/dev/basecrack/src/base_chain.py.base64.a85decode";
  "/Users/mufeedvh/dev/basecrack/src/base_chain.py.DecodeBase.decode_base" -> "/Users/mufeedvh/dev/basecrack/src/base_chain.py.base36.dumps";
  "/Users/mufeedvh/dev/basecrack/src/base_chain.py.DecodeBase.decode_base" -> "/Users/mufeedvh/dev/basecrack/src/base_chain.py.anybase32.decode";
  "/Users/mufeedvh/dev/basecrack/src/base_chain.py.DecodeBase.decode_base" -> "/Users/mufeedvh/dev/basecrack/src/base_chain.py.len";
  "/Users/mufeedvh/dev/basecrack/src/base_chain.py.DecodeBase.decode_base" -> "/Users/mufeedvh/dev/basecrack/src/base_chain.py.base64.b64decode";
  "/Users/mufeedvh/dev/basecrack/src/base_chain.py.DecodeBase.decode_base" -> "/Users/mufeedvh/dev/basecrack/src/base_chain.py.base64.urlsafe_b64decode(
                    encoded_base + '=' * (4 - len(encoded_base) % 4)
                ).decode";
  "/Users/mufeedvh/dev/basecrack/src/base_chain.py.DecodeBase.decode_base" -> "/Users/mufeedvh/dev/basecrack/src/base_chain.py.process_decode";
  "/Users/mufeedvh/dev/basecrack/src/base_chain.py.DecodeBase.decode_base" -> "/Users/mufeedvh/dev/basecrack/src/base_chain.py.base64.b16decode(encoded_base, casefold=False).decode";
  "/Users/mufeedvh/dev/basecrack/src/base_chain.py.DecodeBase.decode_base" -> "/Users/mufeedvh/dev/basecrack/src/base_chain.py.str.encode";
  "/Users/mufeedvh/dev/basecrack/src/base_chain.py.DecodeBase.decode_base" -> "/Users/mufeedvh/dev/basecrack/src/base_chain.py.base64.b32decode";
  "/Users/mufeedvh/dev/basecrack/src/base_chain.py.DecodeBase.decode_base" -> "/Users/mufeedvh/dev/basecrack/src/base_chain.py.base58.b58decode";
  "/Users/mufeedvh/dev/basecrack/src/base_chain.py.DecodeBase.decode_base" -> "/Users/mufeedvh/dev/basecrack/src/base_chain.py.encoded_base.encode";
  "/Users/mufeedvh/dev/basecrack/src/base_chain.py.DecodeBase.decode_base" -> "/Users/mufeedvh/dev/basecrack/src/base_chain.py.base62.decodebytes";
  "/Users/mufeedvh/dev/basecrack/src/base_chain.py.DecodeBase.decode_base" -> "/Users/mufeedvh/dev/basecrack/src/base_chain.py.pybase100.decode";
  "/Users/mufeedvh/dev/basecrack/src/base_chain.py.DecodeBase.decode_base" -> "/Users/mufeedvh/dev/basecrack/src/base_chain.py.pybase100.decode(encoded_base).decode";
  "/Users/mufeedvh/dev/basecrack/src/base_chain.py.DecodeBase.decode_base" -> "/Users/mufeedvh/dev/basecrack/src/base_chain.py.base64.b16decode";
  "/Users/mufeedvh/dev/basecrack/src/base_chain.py.DecodeBase.decode_base" -> "/Users/mufeedvh/dev/basecrack/src/base_chain.py.anybase32.decode(temp_clean_base).decode";
  "/Users/mufeedvh/dev/basecrack/src/base_chain.py.DecodeBase.decode_base" -> "/Users/mufeedvh/dev/basecrack/src/base_chain.py.base91.decode(encoded_base).decode";
  "/Users/mufeedvh/dev/basecrack/src/base_chain.py.DecodeBase.decode_base" -> "/Users/mufeedvh/dev/basecrack/src/base_chain.py.base92.decode";
  "/Users/mufeedvh/dev/basecrack/src/base_chain.py.DecodeBase.decode_base" -> "/Users/mufeedvh/dev/basecrack/src/base_chain.py.base64.urlsafe_b64decode";
  "/Users/mufeedvh/dev/basecrack/src/base_chain.py.DecodeBase.decode_base" -> "/Users/mufeedvh/dev/basecrack/src/base_chain.py.int";
  "/Users/mufeedvh/dev/basecrack/src/base_chain.py.DecodeBase.decode_base" -> "/Users/mufeedvh/dev/basecrack/src/base_chain.py.base91.decode";
  "/Users/mufeedvh/dev/basecrack/tests/tests.py.TestBase.test_base91" -> "/Users/mufeedvh/dev/basecrack/tests/tests.py.BaseCrack";
  "/Users/mufeedvh/dev/basecrack/tests/tests.py.TestBase.test_base91" -> "/Users/mufeedvh/dev/basecrack/tests/tests.py.BaseCrack().decode";
  "/Users/mufeedvh/dev/basecrack/basecrack.py.BaseCrack.magic_mode" -> "/Users/mufeedvh/dev/basecrack/basecrack.py.self.decode";
  "/Users/mufeedvh/dev/basecrack/basecrack.py.BaseCrack.magic_mode" -> "/Users/mufeedvh/dev/basecrack/basecrack.py.' -> '.join";
  "/Users/mufeedvh/dev/basecrack/basecrack.py.BaseCrack.magic_mode" -> "/Users/mufeedvh/dev/basecrack/basecrack.py.open";
  "/Users/mufeedvh/dev/basecrack/basecrack.py.BaseCrack.magic_mode" -> "/Users/mufeedvh/dev/basecrack/basecrack.py.time.time";
  "/Users/mufeedvh/dev/basecrack/basecrack.py.BaseCrack.magic_mode" -> "/Users/mufeedvh/dev/basecrack/basecrack.py.str";
  "/Users/mufeedvh/dev/basecrack/basecrack.py.BaseCrack.magic_mode" -> "/Users/mufeedvh/dev/basecrack/basecrack.py.open(self.output, 'a').write";
  "/Users/mufeedvh/dev/basecrack/basecrack.py.BaseCrack.magic_mode" -> "/Users/mufeedvh/dev/basecrack/basecrack.py.print";
  "/Users/mufeedvh/dev/basecrack/basecrack.py.BaseCrack.magic_mode" -> "/Users/mufeedvh/dev/basecrack/basecrack.py.colored";
  "/Users/mufeedvh/dev/basecrack/basecrack.py.BaseCrack.magic_mode" -> "/Users/mufeedvh/dev/basecrack/basecrack.py.'\n[-] Decoding as {}: '.format";
  "/Users/mufeedvh/dev/basecrack/basecrack.py.BaseCrack.magic_mode" -> "/Users/mufeedvh/dev/basecrack/basecrack.py.quit";
  "/Users/mufeedvh/dev/basecrack/basecrack.py.BaseCrack.magic_mode" -> "/Users/mufeedvh/dev/basecrack/basecrack.py.map";
  "/Users/mufeedvh/dev/basecrack/basecrack.py.BaseCrack.magic_mode" -> "/Users/mufeedvh/dev/basecrack/basecrack.py.encoding_pattern.append";
  "/Users/mufeedvh/dev/basecrack/tests/tests.py.TestBase.test_base36" -> "/Users/mufeedvh/dev/basecrack/tests/tests.py.BaseCrack().decode";
  "/Users/mufeedvh/dev/basecrack/tests/tests.py.TestBase.test_base36" -> "/Users/mufeedvh/dev/basecrack/tests/tests.py.BaseCrack";
  "/Users/mufeedvh/dev/basecrack/basecrack.py.decode_base" -> "/Users/mufeedvh/dev/basecrack/basecrack.py.open(self.output, 'a').write";
  "/Users/mufeedvh/dev/basecrack/basecrack.py.decode_base" -> "/Users/mufeedvh/dev/basecrack/basecrack.py.colored";
  "/Users/mufeedvh/dev/basecrack/basecrack.py.decode_base" -> "/Users/mufeedvh/dev/basecrack/basecrack.py.open";
  "/Users/mufeedvh/dev/basecrack/basecrack.py.decode_base" -> "/Users/mufeedvh/dev/basecrack/basecrack.py.results[x].strip";
  "/Users/mufeedvh/dev/basecrack/basecrack.py.decode_base" -> "/Users/mufeedvh/dev/basecrack/basecrack.py.print_line_separator";
  "/Users/mufeedvh/dev/basecrack/basecrack.py.decode_base" -> "/Users/mufeedvh/dev/basecrack/basecrack.py.len";
  "/Users/mufeedvh/dev/basecrack/basecrack.py.decode_base" -> "/Users/mufeedvh/dev/basecrack/basecrack.py.DecodeBase(
                encoded_base,
                api_call = self.api_call,
                image_mode = self.image_mode_call
            ).decode";
  "/Users/mufeedvh/dev/basecrack/basecrack.py.decode_base" -> "/Users/mufeedvh/dev/basecrack/basecrack.py.quit";
  "/Users/mufeedvh/dev/basecrack/basecrack.py.decode_base" -> "/Users/mufeedvh/dev/basecrack/basecrack.py.DecodeBase";
  "/Users/mufeedvh/dev/basecrack/basecrack.py.decode_base" -> "/Users/mufeedvh/dev/basecrack/basecrack.py.print";
  "/Users/mufeedvh/dev/basecrack/basecrack.py.decode_base" -> "/Users/mufeedvh/dev/basecrack/basecrack.py.range";
  "/Users/mufeedvh/dev/basecrack/basecrack.py.decode_base" -> "/Users/mufeedvh/dev/basecrack/basecrack.py.push_error";
  "/Users/mufeedvh/dev/basecrack/tests/tests.py.TestBase.test_base85" -> "/Users/mufeedvh/dev/basecrack/tests/tests.py.BaseCrack";
  "/Users/mufeedvh/dev/basecrack/tests/tests.py.TestBase.test_base85" -> "/Users/mufeedvh/dev/basecrack/tests/tests.py.BaseCrack().decode";
  "/Users/mufeedvh/dev/basecrack/tests/tests.py.test_base92" -> "/Users/mufeedvh/dev/basecrack/tests/tests.py.BaseCrack().decode";
  "/Users/mufeedvh/dev/basecrack/tests/tests.py.test_base92" -> "/Users/mufeedvh/dev/basecrack/tests/tests.py.BaseCrack";
  "/Users/mufeedvh/dev/basecrack/src/base_chain.py.DecodeBase.contains_replacement_char" -> "/Users/mufeedvh/dev/basecrack/src/base_chain.py.ord";
  "/Users/mufeedvh/dev/basecrack/tests/tests.py.TestBase.test_base64" -> "/Users/mufeedvh/dev/basecrack/tests/tests.py.BaseCrack";
  "/Users/mufeedvh/dev/basecrack/tests/tests.py.TestBase.test_base64" -> "/Users/mufeedvh/dev/basecrack/tests/tests.py.BaseCrack().decode";
  "/Users/mufeedvh/dev/basecrack/tests/tests.py.TestBase.test_base100" -> "/Users/mufeedvh/dev/basecrack/tests/tests.py.BaseCrack().decode";
  "/Users/mufeedvh/dev/basecrack/tests/tests.py.TestBase.test_base100" -> "/Users/mufeedvh/dev/basecrack/tests/tests.py.BaseCrack";
  "/Users/mufeedvh/dev/basecrack/tests/tests.py.test_base16" -> "/Users/mufeedvh/dev/basecrack/tests/tests.py.BaseCrack().decode";
  "/Users/mufeedvh/dev/basecrack/tests/tests.py.test_base16" -> "/Users/mufeedvh/dev/basecrack/tests/tests.py.BaseCrack";
  "/Users/mufeedvh/dev/basecrack/src/base_chain.py.decode" -> "/Users/mufeedvh/dev/basecrack/src/base_chain.py.self.decode_base";
  "/Users/mufeedvh/dev/basecrack/tests/tests.py.TestBase.test_base58" -> "/Users/mufeedvh/dev/basecrack/tests/tests.py.BaseCrack().decode";
  "/Users/mufeedvh/dev/basecrack/tests/tests.py.TestBase.test_base58" -> "/Users/mufeedvh/dev/basecrack/tests/tests.py.BaseCrack";
  "/Users/mufeedvh/dev/basecrack/src/messages.py.print_line_separator" -> "/Users/mufeedvh/dev/basecrack/src/messages.py.colored";
  "/Users/mufeedvh/dev/basecrack/src/messages.py.print_line_separator" -> "/Users/mufeedvh/dev/basecrack/src/messages.py.print";
  "/Users/mufeedvh/dev/basecrack/tests/tests.py.test_base91" -> "/Users/mufeedvh/dev/basecrack/tests/tests.py.BaseCrack";
  "/Users/mufeedvh/dev/basecrack/tests/tests.py.test_base91" -> "/Users/mufeedvh/dev/basecrack/tests/tests.py.BaseCrack().decode";
  "/Users/mufeedvh/dev/basecrack/tests/tests.py.TestBase.test_base92" -> "/Users/mufeedvh/dev/basecrack/tests/tests.py.BaseCrack().decode";
  "/Users/mufeedvh/dev/basecrack/tests/tests.py.TestBase.test_base92" -> "/Users/mufeedvh/dev/basecrack/tests/tests.py.BaseCrack";
  "/Users/mufeedvh/dev/basecrack/tests/tests.py.test_base64" -> "/Users/mufeedvh/dev/basecrack/tests/tests.py.BaseCrack";
  "/Users/mufeedvh/dev/basecrack/tests/tests.py.test_base64" -> "/Users/mufeedvh/dev/basecrack/tests/tests.py.BaseCrack().decode";
  "/Users/mufeedvh/dev/basecrack/tests/tests.py.test_base64url" -> "/Users/mufeedvh/dev/basecrack/tests/tests.py.BaseCrack().decode";
  "/Users/mufeedvh/dev/basecrack/tests/tests.py.test_base64url" -> "/Users/mufeedvh/dev/basecrack/tests/tests.py.BaseCrack";
  "/Users/mufeedvh/dev/basecrack/basecrack.py.magic_mode" -> "/Users/mufeedvh/dev/basecrack/basecrack.py.quit";
  "/Users/mufeedvh/dev/basecrack/basecrack.py.magic_mode" -> "/Users/mufeedvh/dev/basecrack/basecrack.py.open(self.output, 'a').write";
  "/Users/mufeedvh/dev/basecrack/basecrack.py.magic_mode" -> "/Users/mufeedvh/dev/basecrack/basecrack.py.str";
  "/Users/mufeedvh/dev/basecrack/basecrack.py.magic_mode" -> "/Users/mufeedvh/dev/basecrack/basecrack.py.self.decode";
  "/Users/mufeedvh/dev/basecrack/basecrack.py.magic_mode" -> "/Users/mufeedvh/dev/basecrack/basecrack.py.print";
  "/Users/mufeedvh/dev/basecrack/basecrack.py.magic_mode" -> "/Users/mufeedvh/dev/basecrack/basecrack.py.map";
  "/Users/mufeedvh/dev/basecrack/basecrack.py.magic_mode" -> "/Users/mufeedvh/dev/basecrack/basecrack.py.encoding_pattern.append";
  "/Users/mufeedvh/dev/basecrack/basecrack.py.magic_mode" -> "/Users/mufeedvh/dev/basecrack/basecrack.py.colored";
  "/Users/mufeedvh/dev/basecrack/basecrack.py.magic_mode" -> "/Users/mufeedvh/dev/basecrack/basecrack.py.'\n[-] Decoding as {}: '.format";
  "/Users/mufeedvh/dev/basecrack/basecrack.py.magic_mode" -> "/Users/mufeedvh/dev/basecrack/basecrack.py.time.time";
  "/Users/mufeedvh/dev/basecrack/basecrack.py.magic_mode" -> "/Users/mufeedvh/dev/basecrack/basecrack.py.open";
  "/Users/mufeedvh/dev/basecrack/basecrack.py.magic_mode" -> "/Users/mufeedvh/dev/basecrack/basecrack.py.' -> '.join";
  "/Users/mufeedvh/dev/basecrack/tests/tests.py.test_base36" -> "/Users/mufeedvh/dev/basecrack/tests/tests.py.BaseCrack";
  "/Users/mufeedvh/dev/basecrack/tests/tests.py.test_base36" -> "/Users/mufeedvh/dev/basecrack/tests/tests.py.BaseCrack().decode";
  "/Users/mufeedvh/dev/basecrack/tests/tests.py.TestBase.test_base64url" -> "/Users/mufeedvh/dev/basecrack/tests/tests.py.BaseCrack";
  "/Users/mufeedvh/dev/basecrack/tests/tests.py.TestBase.test_base64url" -> "/Users/mufeedvh/dev/basecrack/tests/tests.py.BaseCrack().decode";
  "/Users/mufeedvh/dev/basecrack/basecrack.py.main" -> "/Users/mufeedvh/dev/basecrack/basecrack.py.print";
  "/Users/mufeedvh/dev/basecrack/basecrack.py.main" -> "/Users/mufeedvh/dev/basecrack/basecrack.py.colored";
  "/Users/mufeedvh/dev/basecrack/basecrack.py.main" -> "/Users/mufeedvh/dev/basecrack/basecrack.py.input";
  "/Users/mufeedvh/dev/basecrack/basecrack.py.main" -> "/Users/mufeedvh/dev/basecrack/basecrack.py.BaseCrack(output=args.output).decode_from_file";
  "/Users/mufeedvh/dev/basecrack/basecrack.py.main" -> "/Users/mufeedvh/dev/basecrack/basecrack.py.BaseCrack(
                output=args.output, magic_mode_call=True, quit_after_fail=False
            ).decode_from_image";
  "/Users/mufeedvh/dev/basecrack/basecrack.py.main" -> "/Users/mufeedvh/dev/basecrack/basecrack.py.banner";
  "/Users/mufeedvh/dev/basecrack/basecrack.py.main" -> "/Users/mufeedvh/dev/basecrack/basecrack.py.argparse.ArgumentParser";
  "/Users/mufeedvh/dev/basecrack/basecrack.py.main" -> "/Users/mufeedvh/dev/basecrack/basecrack.py.BaseCrack(
                quit_after_fail=False
            ).decode_from_image";
  "/Users/mufeedvh/dev/basecrack/basecrack.py.main" -> "/Users/mufeedvh/dev/basecrack/basecrack.py.BaseCrack(
                output=args.output,
                magic_mode_call=True
            ).decode_from_file";
  "/Users/mufeedvh/dev/basecrack/basecrack.py.main" -> "/Users/mufeedvh/dev/basecrack/basecrack.py.BaseCrack().magic_mode";
  "/Users/mufeedvh/dev/basecrack/basecrack.py.main" -> "/Users/mufeedvh/dev/basecrack/basecrack.py.raw_input";
  "/Users/mufeedvh/dev/basecrack/basecrack.py.main" -> "/Users/mufeedvh/dev/basecrack/basecrack.py.BaseCrack";
  "/Users/mufeedvh/dev/basecrack/basecrack.py.main" -> "/Users/mufeedvh/dev/basecrack/basecrack.py.BaseCrack().decode_base";
  "/Users/mufeedvh/dev/basecrack/basecrack.py.main" -> "/Users/mufeedvh/dev/basecrack/basecrack.py.parser.parse_args";
  "/Users/mufeedvh/dev/basecrack/basecrack.py.main" -> "/Users/mufeedvh/dev/basecrack/basecrack.py.str";
  "/Users/mufeedvh/dev/basecrack/basecrack.py.main" -> "/Users/mufeedvh/dev/basecrack/basecrack.py.parser.add_argument";
  "/Users/mufeedvh/dev/basecrack/src/base_chain.py.process_decode" -> "/Users/mufeedvh/dev/basecrack/src/base_chain.py.colored";
  "/Users/mufeedvh/dev/basecrack/src/base_chain.py.process_decode" -> "/Users/mufeedvh/dev/basecrack/src/base_chain.py.print";
  "/Users/mufeedvh/dev/basecrack/src/base_chain.py.process_decode" -> "/Users/mufeedvh/dev/basecrack/src/base_chain.py.'\n[>] Decoding as {}: '.format";
  "/Users/mufeedvh/dev/basecrack/src/base_chain.py.process_decode" -> "/Users/mufeedvh/dev/basecrack/src/base_chain.py.self.contains_replacement_char";
  "/Users/mufeedvh/dev/basecrack/src/base_chain.py.process_decode" -> "/Users/mufeedvh/dev/basecrack/src/base_chain.py.len";
  "/Users/mufeedvh/dev/basecrack/src/base_chain.py.process_decode" -> "/Users/mufeedvh/dev/basecrack/src/base_chain.py.encoding_type.append";
  "/Users/mufeedvh/dev/basecrack/src/base_chain.py.process_decode" -> "/Users/mufeedvh/dev/basecrack/src/base_chain.py.results.append";
  "/Users/mufeedvh/dev/basecrack/src/base92.py.base92_ord" -> "/Users/mufeedvh/dev/basecrack/src/base92.py.ValueError";
  "/Users/mufeedvh/dev/basecrack/src/base92.py.base92_ord" -> "/Users/mufeedvh/dev/basecrack/src/base92.py.ord";
  "/Users/mufeedvh/dev/basecrack/tests/tests.py.test_ascii85" -> "/Users/mufeedvh/dev/basecrack/tests/tests.py.BaseCrack";
  "/Users/mufeedvh/dev/basecrack/tests/tests.py.test_ascii85" -> "/Users/mufeedvh/dev/basecrack/tests/tests.py.BaseCrack().decode";
  "/Users/mufeedvh/dev/basecrack/tests/tests.py.TestBase.test_ascii85" -> "/Users/mufeedvh/dev/basecrack/tests/tests.py.BaseCrack().decode";
  "/Users/mufeedvh/dev/basecrack/tests/tests.py.TestBase.test_ascii85" -> "/Users/mufeedvh/dev/basecrack/tests/tests.py.BaseCrack";
}